#!/bin/bash

# config directory
CONFIG_DIR=~/.config/rdcli

# login file
LOGIN_FILE=$CONFIG_DIR"/rdcli.login"

# cookie file
COOKIE=$CONFIG_DIR"/cookies.txt"

# directory to store rdcli's temp files
TMP_DIR=/tmp/rdcli

MD5_COMMAND=""

WGET_OPTIONS=""

LOGGED=false

DEBUG=true

TEST=false

# Print rdcli usage information
usage() {
    echo "Usage: ./rdcli [OPTIONS] LINK"
    
    echo -e "\nOPTIONS:"
    echo -e "  -q\tQuiet mode. No output will be generated."
    echo -e "  -t\tTest mode. Perform all operations EXCEPT file downloading."
    echo -e "  -i\tInit. Forces rdcli to ask for your login and password."
    echo -e "\tUseful if you made a typo or if you changed your login information since you first used rdcli."
    echo -e "  -h\tHelp. Display this help."

    echo -e "\nLINK can be a URL to a single file you want to dowload (i.e. http://host.com/myFile.zip) or a file containing several links."
    
    echo -e "\nExample: ./rdcli http://host.com/myFile.zip"
    echo "Example: ./rdcli urls.txt"
    echo "Example: ./rdcli -t links-to-test.txt"

    echo -e "\nReport rdcli bugs to https://github.com/MrMitch/realdebrid-CLI/issues/new"

    exit 0
}

# Test if md5sum exists, otherwise use md5
test_md5sum() {
    if `echo "test" | md5sum > /dev/null 2>&1`
        then
        MD5_COMMAND=md5sum
    else
        MD5_COMMAND=md5
    fi
}

# Ask for user's login and password
ask_login() {
    echo "What is your Real-Debrid username ?"
    read LOGIN
    echo "What is your Real-Debrid password ? (will not be displayed and will not be stored as plain text on your computer)"
    read -s PASSWORD

    PASSWORD=`echo -n $PASSWORD | $MD5_COMMAND | tr -d " -"`

    echo $LOGIN":"$PASSWORD > $LOGIN_FILE 
    rm -rf $COOKIE
}

# Log into real-debrid.com and record a cookie so we 
# don't need to login back again for multiple downloads
login() {

    local TMP_RESP=$TMP_DIR"/"rdcli-login-response.json
    
    wget -q --save-cookies $COOKIE --keep-session-cookies -O $TMP_RESP \
    "http://www.real-debrid.com/ajax/login.php?user=$LOGIN&pass=$PASSWORD"
    
    local RESULT=`cat $TMP_RESP | tr -d "{}\"" | cut -d, -f2 | cut -d: -f2`
    if [ "$RESULT" == "OK" ]
        then
        LOGGED=true
    fi
}

unrestrict() {
    local TMP_RESP=$TMP_DIR"/rdcli-unrestrict-response.json"

    wget -q --load-cookies $COOKIE -O $TMP_RESP \
    "http://www.real-debrid.com/ajax/unrestrict.php?link=$1"

    local RESULT=`grep -o "_link\":\"\(.*\),\"l" $TMP_RESP | cut -d "\"" -f3`

    echo $RESULT | sed 's/\\//g'
}

# Download a file
download() {
    wget $WGET_OPTIONS $1
}

debug() {
    if $DEBUG
        then
        echo -ne "$@"  
    fi
}

parse_options() {
    for (( i=1; i<${#1}; i++ ))
        do
        case ${1:$i:1} in
            "h" ) 
                usage;;
            "i" )
                ask_login;;
            "q" ) 
                WGET_OPTIONS="-q"
                DEBUG=false;;
            "t" )
                TEST=true;;
            * ) 
                # ignore non existing options
                ;;
        esac
    done
}

download() {
    if ! $TEST
        then
        wget $WGET_OPTIONS $1
    fi
}

# main programm
main() {
    mkdir -p $CONFIG_DIR

    if [ $# -lt 1 ]
    	then
        echo "You must provide a URL or a valid option"
        usage
    else
        # check for command line options
        if [ $# -ge 1 ]
            then

            # if the first char is "-", assume it's an option, otherwise, assume it's a link
            if [ ${1:0:1} == "-" ]
                then
                parse_options $1

                # if only options are passed, without actual links to download, exit
                if [ $# -eq 1 ]
                    then
                    exit 0
                fi
            fi
        fi

        # check for login info
        if [ ! -r $LOGIN_FILE -a ! -s $LOGIN_FILE ]
        	then
            ask_login
        fi

        # retrieve login info
        if [ -z $LOGIN -o -z $PASSWORD ]
        	then
            LOGIN=`cut -d: -f1 $LOGIN_FILE`
            PASSWORD=`cut -d: -f2 $LOGIN_FILE`
        fi

        mkdir -p $TMP_DIR

        if [ ! -r $COOKIE ]
            then
            debug "no existing cookie, login in...\n"
            login
        else
            DATE=`tail -1 $COOKIE | cut -f5`
            if [ ${DATE:-0} -gt `date +%s` ] 
                then
                debug "valid cookie\n"
                LOGGED=true
            else
                debug "previous cookie expired\n"
                login
            fi
        fi

        if $LOGGED
        	then  
            debug "login OK\n"

            # if the last arguments is a valid file
            if [ -r "${!#}" ] 
            	then
                debug "multiple downloads\n" 

                ORIGINAL_LINKS_FILE=${!#}
                UNRESTRICTED_LINKS_FILE=$TMP_DIR"/rdcli-unrestricted"
                echo -n "" > $UNRESTRICTED_LINKS_FILE
                
                for LINK in `cat $ORIGINAL_LINKS_FILE`
                    do
                    debug "unrestricting $LINK"
                    UNRESTRICTED=`unrestrict $LINK`

                    if [ ${#UNRESTRICTED} -gt 1 ]
                        then
                        debug " -> $UNRESTRICTED\n"
                        echo $UNRESTRICTED >> $UNRESTRICTED_LINKS_FILE
                    else
                        debug " -> WARNING: Unrestriction failed, this file will not be downloaded.\n"
                    fi
                done
                WGET_OPTIONS=$WGET_OPTIONS" -i "
                
                download $UNRESTRICTED_LINKS_FILE
            else
                debug "single download\n"
                debug "unrestricting ${!#}"
                UNRESTRICTED=`unrestrict ${!#}`

                if [ ${#UNRESTRICTED} -gt 1 ]
                    then
                    debug " -> $UNRESTRICTED\n" 
                    download $UNRESTRICTED
                else
                    debug " -> WARNING: Unrestriction failed, this file will not be downloaded.\n"
                fi
            fi
        else
            debug "Login failed"
            exit 1
        fi

        debug "End"
    fi

    rm -rf $TMP_DIR
}

main "$@"
exit 0